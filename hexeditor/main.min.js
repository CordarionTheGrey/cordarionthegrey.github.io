(function(){"use strict";var DEFAULT_SCALE,DEFAULT_EDGE_THICKNESS,PALETTES,$id,getEdgeKey,createModel,serializeModel,deserializeModel,createView,customEventListeners,addCustomListener,fireCustomListener,moveTileRaw,createNode,createTile,addTileToView,updateTileInView,removeTileFromView,getEdge,createEdgeWithMaster,addEdgeToView,updateEdgeInView,removeEdgeFromView,formatTileId,main;DEFAULT_SCALE=3;DEFAULT_EDGE_THICKNESS=0.25;PALETTES=['palette-tile-placer','palette-object-registry','palette-tile-inspector','palette-edge-inspector'];if(!Object.values){Object.values=function(o){var i$,x$,ref$,len$,results$=[];for(i$=0,len$=(ref$=Object.keys(o)).length;i$<len$;++i$){x$=ref$[i$];results$.push(o[x$]);}
return results$;};}
$id=function(it){return document.getElementById(it);};getEdgeKey=function(pos0,pos1){return pos0<<16|pos1;};createModel=function(){return{tiles:{},edges:{},idCounter:-1};};serializeModel=function(model){return JSON.stringify({tiles:Object.values(model.tiles),edges:Object.values(model.edges),idCounter:model.idCounter});};deserializeModel=function(s){var o,tiles,res$,i$,x$,ref$,len$,edges,y$;o=JSON.parse(s);res$={};for(i$=0,len$=(ref$=o.tiles).length;i$<len$;++i$){x$=ref$[i$];res$[x$.pos]=x$;}
tiles=res$;res$={};for(i$=0,len$=(ref$=o.edges).length;i$<len$;++i$){y$=ref$[i$];res$[getEdgeKey(y$.pos0,y$.pos1)]=y$;}
edges=res$;return{tiles:tiles,edges:edges,idCounter:o.idCounter};};createView=function(){return{svgRoot:$id('svg-root'),tiles:{},polygons:{},labels:{},sublabels:{},edges:{}};};customEventListeners={};addCustomListener=function(target,type,action){var x$,that;x$=customEventListeners[type]||(customEventListeners[type]={});if(that=x$[target]){that.push(action);}else{x$[target]=[action];}};fireCustomListener=function(target,type){var that,i$,x$,len$,e;if(that=customEventListeners[type]){if(that=that[target]){for(i$=0,len$=that.length;i$<len$;++i$){x$=that[i$];try{x$();}catch(e$){e=e$;console.error(e);}}}}};var Vec={make:function(q,r){return(q&0xFF)|(r&0xFF)<<8;},fromCartesian:function(x,y,scale){var t=y/3/scale;return this.make(Math.round(x/Math.sqrt(3)/scale-t),Math.round(t*2));},toCartesian:function(vec,scale){var q=vec<<24>>24,r=vec<<16>>24;return[(q+r*.5)*Math.sqrt(3)*scale,r*1.5*scale];},add:function(a,b){return((a+b)&0xFF)|((a+(b&0xFF00))&0xFF00);},sub:function(a,b){return((a-b)&0xFF)|((a-(b&0xFF00))&0xFF00);},mul:function(vec,n){return(vec<<24)*n>>>24|((vec&0xFF00)<<16)*n>>>16;},cmp:function(a,b){return(((a+0x80)&0xFF)|((a+0x8000)&0xFF00))-(((b+0x80)&0xFF)|((b+0x8000)&0xFF00));},len:function(vec){var q=vec<<24>>24,r=vec<<16>>24,result=Math.abs(q+r);if((q^r)<0){return result+Math.min(Math.abs(q),Math.abs(r));}
return result;},dist:function(a,b){return this.len(this.sub(a,b));},inArrowSector:function(arrow,pos){if(!pos)return false;var q=pos<<24>>24,r=pos<<16>>24;switch(arrow){case 0x0001:return r<=q&&r<<1>=-q;case 0x00FF:return r>=q&&r<<1<=-q;case 0x0100:return r>=q&&r>=-q<<1;case 0xFF00:return r<=q&&r<=-q<<1;case 0xFF01:return r>=-q<<1&&r<<1<=-q;case 0x01FF:return r<=-q<<1&&r<<1>=-q;case 0xFE01:return r<0&&r===-q<<1;case 0x02FF:return r>0&&r===-q<<1;default:return false;}},_cache:[[0x0]],ofLen:function(n){var result=this._cache[n],i;if(result)return result;for(i=this._cache.length;i<n;i++){this._cache[i]=null;}
result=[this.make(0,-n),this.make(0,n)];for(i=1;i<n;i++){result.push(this.make(-i,i-n),this.make(-i,n),this.make(i,-n),this.make(i,n-i));}
for(i=0;i<=n;i++){result.push(this.make(-n,i),this.make(n,-i));}
return(this._cache[n]=result.sort(this.cmp));}};moveTileRaw=function(tile,x,y){var x$;x$=tile.transform.baseVal[0].matrix;x$.e=x;x$.f=y;};createNode=function(tagName,attrs,children){var node,i$,x$,ref$,len$,y$;node=document.createElementNS('http://www.w3.org/2000/svg',tagName);for(i$=0,len$=(ref$=Object.keys(attrs)).length;i$<len$;++i$){x$=ref$[i$];node.setAttribute(x$,attrs[x$]);}
if(children){for(i$=0,len$=children.length;i$<len$;++i$){y$=children[i$];node.appendChild(y$);}}
return node;};createTile=function(pos,id,color){return{pos:pos,id:id,color:color,label:"",sublabel:""};};addTileToView=function(view,arg$){var pos,id,color,label,sublabel,vPoly,vLabel,vSublabel,children,x$,xy;pos=arg$.pos,id=arg$.id,color=arg$.color,label=arg$.label,sublabel=arg$.sublabel;console.assert(!(pos in view.tiles),"A tile is placed above another one");vPoly=createNode('polygon',{points:"9.5,-5.5 9.5,5.5 0,11 -9.5,5.5 -9.5,-5.5 0,-11",style:"fill:"+color});vLabel=createNode('text',{'class':'tile-label'});vSublabel=createNode('text',{'class':'tile-sublabel',y:6});vLabel.textContent=label;vSublabel.textContent=sublabel;children=[vPoly,vLabel,vSublabel];if(id!=null){(children[3]=createNode('text',{'class':'tile-id',y:-6})).textContent='#'+id;}
view.polygons[pos]=vPoly;view.labels[pos]=vLabel;view.sublabels[pos]=vSublabel;x$=view.tiles[pos]=createNode('g',{'class':'hex-tile',transform:"translate(0,0)"},children);xy=Vec.toCartesian(pos,11);moveTileRaw(x$,xy[0],xy[1]);view.svgRoot.appendChild(x$);return x$;};updateTileInView=function(view,arg$){var pos;pos=arg$.pos,view.polygons[pos].style.fill=arg$.color,view.labels[pos].textContent=arg$.label,view.sublabels[pos].textContent=arg$.sublabel;};removeTileFromView=function(view,arg$){var pos,ref$,ref1$;pos=arg$.pos;view.svgRoot.removeChild((ref1$=(ref$=view.tiles)[pos],delete ref$[pos],ref1$));delete view.polygons[pos];delete view.labels[pos];delete view.sublabels[pos];};getEdge=function(model,pos0,pos1){return model.edges[getEdgeKey(pos0,pos1)]||model.edges[getEdgeKey(pos1,pos0)];};createEdgeWithMaster=function(model,pos0,pos1,thickness){var a,b;a=model.tiles[pos0];b=model.tiles[pos1];if(a.id>=b.id){return[{pos0:pos0,pos1:pos1,thickness:thickness},a];}else{return[{pos0:pos1,pos1:pos0,thickness:thickness},b];}};addEdgeToView=function(view,arg$,masterTile){var pos0,pos1,thickness,x1,y1,x2,y2,line;pos0=arg$.pos0,pos1=arg$.pos1,thickness=arg$.thickness;switch(Vec.sub(pos1,pos0)){case 0x0001:x1=9.5;y1=-5.5;x2=9.5;y2=5.5;break;case 0x00FF:x1=-9.5;y1=-5.5;x2=-9.5;y2=5.5;break;case 0x0100:x1=9.5;y1=5.5;x2=0;y2=11;break;case 0xFF00:x1=-9.5;y1=-5.5;x2=0;y2=-11;break;case 0xFF01:x1=9.5;y1=-5.5;x2=0;y2=-11;break;case 0x01FF:x1=-9.5;y1=5.5;x2=0;y2=11;}
line=createNode('line',{x1:x1,y1:y1,x2:x2,y2:y2,style:"stroke-width:"+thickness});view.edges[getEdgeKey(pos0,pos1)]=line;view.tiles[masterTile.pos].appendChild(line);};updateEdgeInView=function(view,edge){view.edges[getEdgeKey(edge.pos0,edge.pos1)].style.strokeWidth=edge.thickness;};removeEdgeFromView=function(view,edge){var x$,ref$,key$,ref1$;x$=(ref1$=(ref$=view.edges)[key$=getEdgeKey(edge.pos0,edge.pos1)],delete ref$[key$],ref1$);x$.parentNode.removeChild(x$);};formatTileId=function(model,pos){if(pos!=null){return'#'+model.tiles[pos].id;}else{return'?';}};main=function(){var model,view,uiModel,svg,coeff,rootX,rootY,i$,ref$,len$,palId,pal,placeButton,unplaceButton;removeEventListener('DOMContentLoaded',main);model=createModel();view=createView();uiModel={auxTile:null,activePal:"",placerAction:"",curInspected:null,curInspected1:null,curInspected2:null,curInspectedEdge:null};svg=view.svgRoot.parentNode;coeff=0.5/DEFAULT_SCALE;rootX=svg.clientWidth*coeff;rootY=svg.clientHeight*coeff;moveTileRaw(view.svgRoot,rootX,rootY);for(i$=0,len$=(ref$=PALETTES).length;i$<len$;++i$){palId=ref$[i$];pal=$id(palId);(fn$.call(this,palId,pal.getElementsByClassName('contents')[0]));}
placeButton=$id('place-tile');unplaceButton=$id('unplace-tile');placeButton.addEventListener('click',function(){unplaceButton.classList.remove('pressed-button');placeButton.classList.toggle('pressed-button');uiModel.placerAction=uiModel.placerAction!=='place'?'place':"";});unplaceButton.addEventListener('click',function(){placeButton.classList.remove('pressed-button');unplaceButton.classList.toggle('pressed-button');uiModel.placerAction=uiModel.placerAction!=='unplace'?'unplace':"";});addCustomListener('palette-tile-placer','close',function(){placeButton.classList.remove('pressed-button');unplaceButton.classList.remove('pressed-button');uiModel.placerAction="";});svg.addEventListener('mousemove',function(ev){var pos,that;if(uiModel.placerAction!=='place'){return;}
pos=Vec.fromCartesian(ev.offsetX-rootX,ev.offsetY-rootY,11);if(that=uiModel.auxTile){if(pos===that.pos){return;}
removeTileFromView(view,that);}
if(pos in model.tiles){uiModel.auxTile=null;}else{addTileToView(view,uiModel.auxTile=createTile(pos,null,'#F2F2F2')).classList.add('ghost');}});svg.addEventListener('mousedown',function(ev){var that,pos,tile,input,edge,ref$,masterTile;if(ev.button){return;}
if(uiModel.placerAction==='place'){if(that=uiModel.auxTile){removeTileFromView(view,that);addTileToView(view,model.tiles[that.pos]=createTile(that.pos,++model.idCounter,'#EEEEEE'));uiModel.auxTile=null;}}else if(uiModel.placerAction==='unplace'){pos=Vec.fromCartesian(ev.offsetX-rootX,ev.offsetY-rootY,11);if(that=model.tiles[pos]){delete model.tiles[pos];removeTileFromView(view,that);}}else if(uiModel.activePal==='palette-tile-inspector'){pos=Vec.fromCartesian(ev.offsetX-rootX,ev.offsetY-rootY,11);if(pos!==uiModel.curInspected&&(tile=model.tiles[pos])){if((that=uiModel.curInspected)!=null){view.tiles[that].classList.remove('inspected');}
uiModel.curInspected=pos;view.tiles[pos].classList.add('inspected');$id('inspected-id').textContent='#'+tile.id;$id('inspected-color').value=tile.color;$id('inspected-label').value=tile.label;$id('inspected-sublabel').value=tile.sublabel;}}else if(uiModel.activePal==='palette-edge-inspector'){pos=Vec.fromCartesian(ev.offsetX-rootX,ev.offsetY-rootY,11);if(tile=model.tiles[pos]){if(uiModel.curInspected1!=null&&uiModel.curInspected2==null&&Vec.dist(uiModel.curInspected1,pos)===1){uiModel.curInspected2=pos;}else{uiModel.curInspected1=pos;uiModel.curInspected2=null;}
$id('inspected-edge').textContent=formatTileId(model,uiModel.curInspected1)+" — "+formatTileId(model,uiModel.curInspected2);input=$id('inspected-edge-thickness');if(input.disabled=uiModel.curInspected2==null){input.value="";}else{if(!(edge=getEdge(model,uiModel.curInspected1,uiModel.curInspected2))){ref$=createEdgeWithMaster(model,uiModel.curInspected1,uiModel.curInspected2,DEFAULT_EDGE_THICKNESS),edge=ref$[0],masterTile=ref$[1];model.edges[getEdgeKey(edge.pos0,edge.pos1)]=edge;addEdgeToView(view,edge,masterTile);}
uiModel.curInspectedEdge=edge;input.value=edge.thickness;}}}});svg.addEventListener('mouseleave',function(){var that;if(uiModel.placerAction!=='place'){return;}
if((that=uiModel.auxTile)!=null){removeTileFromView(view,that);uiModel.auxTile=null;}});$id('inspected-color').addEventListener('input',function(){var that,x$;if((that=uiModel.curInspected)!=null){x$=model.tiles[that];x$.color=this.value;updateTileInView(view,x$);}});$id('inspected-label').addEventListener('input',function(){var that,x$;if((that=uiModel.curInspected)!=null){x$=model.tiles[that];x$.label=this.value;updateTileInView(view,x$);}});$id('inspected-sublabel').addEventListener('input',function(){var that,x$;if((that=uiModel.curInspected)!=null){x$=model.tiles[that];x$.sublabel=this.value;updateTileInView(view,x$);}});addCustomListener('palette-tile-inspector','close',function(){var that;if((that=uiModel.curInspected)!=null){view.tiles[that].classList.remove('inspected');uiModel.curInspected=null;}
$id('inspected-id').textContent="<Не выбрано>";$id('inspected-color').textContent=$id('inspected-label').textContent=$id('inspected-sublabel').textContent="";});$id('inspected-edge-thickness').addEventListener('input',function(){var that;if(that=uiModel.curInspectedEdge){that.thickness=this.value;updateEdgeInView(view,that);}});addCustomListener('palette-edge-inspector','close',function(){uiModel.curInspected1=uiModel.curInspected2=null;$id('inspected-edge').textContent="? — ?";$id('inspected-edge-thickness').value="";});function fn$(palId,contents){contents.classList.add('hidden');pal.getElementsByClassName('header')[0].addEventListener('click',function(){var that;if(that=uiModel.activePal){$id(that).getElementsByClassName('contents')[0].classList.add('hidden');fireCustomListener(that,'close');if(palId===that){uiModel.activePal="";return;}}
fireCustomListener(palId,'open');contents.classList.toggle('hidden');uiModel.activePal=palId;});}};addEventListener('DOMContentLoaded',main);}).call(this);